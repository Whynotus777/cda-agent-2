{"prompt": "Explain # DREAMPlace", "response": "Deep learning toolkit-enabled VLSI placement.\nWith the analogy between nonlinear VLSI placement and deep learning training problem, this tool is developed with deep learning toolkit for flexibility and efficiency.\nThe tool runs on both CPU and GPU.\nOver `30X` speedup over the CPU implementation ([RePlAce](https://doi.org/10.1109/TCAD.2018.2859220)) is achieved in global placement and legalization on ISPD 2005 contest benchmarks with a Nvidia Tesla V100 GPU.\nDREAMPlace also integrates a GPU-accelerated detailed placer, _ABCDPlace_, which can achieve around `16X` speedup on million-size benchmarks over the widely-adopted sequential placer [NTUPlace3](https://doi.org/10.1109/TCAD.2008.923063) on CPU.\n\n- [DREAMPlace](#dreamplace)\n- [Publications](#publications)\n- [Dependency](#dependency)\n- [How to Install Python Dependency](#how-to-install-python-dependency)\n- [How to Build](#how-to-build)\n  - [Build with Docker](#build-with-docker)\n  - [Build without Docker](#build-without-docker)\n- [How to Get Benchmarks](#how-to-get-benchmarks)\n- [How to Run](#how-to-run)\n- [Configurations](#configurations)\n- [Authors](#authors)\n- [Features](#features)\n\nDREAMPlace runs on both CPU and GPU. If it is installed on a machine without GPU, only CPU support will be enabled with multi-threading.\n\n- Animation\n\n| Bigblue4                                              | Density Map                                | Electric Potential                                      | Electric Field                                  |\n| ----------------------------------------------------- | ------------------------------------------ | ------------------------------------------------------- | ----------------------------------------------- |\n| <img src=/images/bigblue4-nofiller_SLD.gif width=250> | ![Density Map](images/density_map_SLD.gif) | ![Electric Potential Map](images/potential_map_SLD.gif) | ![Electric Field Map](images/field_map_SLD.gif) |\n\n- Reference Flow\n\n<img src=images/DREAMPlace4.1_flow.png width=600>", "metadata": {"source": "documentation", "file": "README.md", "phase": "placement"}}
{"prompt": "Explain Publications", "response": "- [Yibo Lin](http://yibolin.com), Shounak Dhar, [Wuxi Li](http://wuxili.net), Haoxing Ren, Brucek Khailany and [David Z. Pan](http://users.ece.utexas.edu/~dpan),\n  \"**DREAMPlace: Deep Learning Toolkit-Enabled GPU Acceleration for Modern VLSI Placement**\",\n  ACM/IEEE Design Automation Conference (DAC), Las Vegas, NV, Jun 2-6, 2019\n  ([preprint](http://yibolin.com/publications/papers/PLACE_DAC2019_Lin.pdf)) ([slides](http://yibolin.com/publications/papers/PLACE_DAC2019_Lin.slides.pptx))\n\n- [Yibo Lin](http://yibolin.com), Zixuan Jiang, [Jiaqi Gu](https://jeremiemelo.github.io), [Wuxi Li](http://wuxili.net), Shounak Dhar, Haoxing Ren, Brucek Khailany and [David Z. Pan](http://users.ece.utexas.edu/~dpan),\n  \"**DREAMPlace: Deep Learning Toolkit-Enabled GPU Acceleration for Modern VLSI Placement**\",\n  IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD), 2020\n\n- [Yibo Lin](http://yibolin.com), [Wuxi Li](http://wuxili.net), [Jiaqi Gu](https://jeremiemelo.github.io), Haoxing Ren, Brucek Khailany and [David Z. Pan](http://users.ece.utexas.edu/~dpan),\n  \"**ABCDPlace: Accelerated Batch-based Concurrent Detailed Placement on Multi-threaded CPUs and GPUs**\",\n  IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems (TCAD), 2020\n  ([preprint](http://yibolin.com/publications/papers/ABCDPLACE_TCAD2020_Lin.pdf))\n\n- [Yibo Lin](http://yibolin.com), [David Z. Pan](http://users.ece.utexas.edu/~dpan), Haoxing Ren and Brucek Khailany,\n  \"**DREAMPlace 2.0: Open-Source GPU-Accelerated Global and Detailed Placement for Large-Scale VLSI Designs**\",\n  China Semiconductor Technology International Conference (CSTIC), Shanghai, China, Jun, 2020 ([preprint](http://yibolin.com/publications/papers/PLACE_CSTIC2020_Lin.pdf))(Invited Paper)\n\n- [Jiaqi Gu](https://jeremiemelo.github.io), Zixuan Jiang, [Yibo Lin](http://yibolin.com) and [David Z. Pan](http://users.ece.utexas.edu/~dpan),\n  \"**DREAMPlace 3.0: Multi-Electrostatics Based Robust VLSI Placement with Region Constraints**\",\n  IEEE/ACM International Conference on Computer-Aided Design (ICCAD), Nov 2-5, 2020\n  ([preprint](http://yibolin.com/publications/papers/PLACE_ICCAD2020_Gu.pdf))\n\n- [Peiyu Liao](https://enzoleo.github.io), [Siting Liu](https://lusica1031.github.io), Zhitang Chen, Wenlong Lv, [Yibo Lin](http://yibolin.com) and [Bei Yu](https://www.cse.cuhk.edu.hk/~byu/),\n  \"**DREAMPlace 4.0: Timing-driven Global Placement with Momentum-based Net Weighting**\",\n  IEEE/ACM Proceedings Design, Automation and Test in Eurpoe (DATE), Antwerp, Belgium, Mar 14-23, 2022\n  ([preprint](https://yibolin.com/publications/papers/PLACE_DATE2022_Liao.pdf))\n\n- Yifan Chen, [Zaiwen Wen](http://faculty.bicmr.pku.edu.cn/~wenzw/), [Yun Liang](https://ericlyun.github.io/), [Yibo Lin](http://yibolin.com),\n  \"**Stronger Mixed-Size Placement Backbone Considering Second-Order Information**\",\n  IEEE/ACM International Conference on Computer-Aided Design (ICCAD), San Francisco, CA, Oct, 2023\n  ([preprint](https://yibolin.com/publications/papers/PLACE_ICCAD2023_Chen.pdf))", "metadata": {"source": "documentation", "file": "README.md", "phase": "placement"}}
{"prompt": "Explain Dependency", "response": "- [Python](https://www.python.org/) 3.5/3.6/3.7/3.8/3.9\n\n- [Pytorch](https://pytorch.org/) 1.6/1.7/1.8/2.0\n\n  - Other versions may also work, but not tested\n\n- [GCC](https://gcc.gnu.org/)\n\n  - Recommend GCC 7.5 (with `c++17` support).\n  - Do not recommend GCC 9 or later due to backward compatibility issues.\n  - Other compilers may also work, but not tested.\n\n- [Boost](https://www.boost.org) >= 1.55.0\n  - Need to install and visible for linking\n- [Bison](https://www.gnu.org/software/bison) >= 3.3\n\n  - Need to install\n\n- [Limbo](https://github.com/limbo018/Limbo)\n\n  - Integrated as a git submodule\n\n- [Flute](https://doi.org/10.1109/TCAD.2007.907068)\n\n  - Integrated as a submodule\n\n- [OpenTimer](https://github.com/OpenTimer/OpenTimer)\n\n  - [Modified version](https://github.com/enzoleo/OpenTimer) for timing optimization\n  - Integrated as a submodule\n\n- [CUB](https://github.com/NVlabs/cub)\n\n  - Integrated as a git submodule\n\n- [munkres-cpp](https://github.com/saebyn/munkres-cpp)\n\n  - Integrated as a git submodule\n\n- [CUDA 9.1 or later](https://developer.nvidia.com/cuda-toolkit) (Optional)\n\n  - If installed and found, GPU acceleration will be enabled.\n  - Otherwise, only CPU implementation is enabled.\n\n- GPU architecture compatibility 6.0 or later (Optional)\n  - Code has been tested on GPUs with compute compatibility 6.0, 7.0, and 7.5.\n  - Please check the [compatibility](https://developer.nvidia.com/cuda-gpus) of the GPU devices.\n  - The default compilation target is compatibility 6.0. This is the minimum requirement and lower compatibility is not supported for the GPU feature.\n  - For compatibility 7.0, it is necessary to set the CMAKE_CUDA_FLAGS to -gencode=arch=compute_70,code=sm_70.\n- [Cairo](https://github.com/freedesktop/cairo) (Optional)\n\n  - If installed and found, the plotting functions will be faster by using C/C++ implementation.\n  - Otherwise, python implementation is used.\n\n- [NTUPlace3](http://eda.ee.ntu.edu.tw/research.htm) (Optional)\n  - If the binary is provided, it can be used to perform detailed placement.\n\nTo pull git submodules in the root directory\n\n```\ngit submodule init\ngit submodule update\n```\n\nOr alternatively, pull all the submodules when cloning the repository.\n\n```\ngit clone --recursive https://github.com/limbo018/DREAMPlace.git\n```", "metadata": {"source": "documentation", "file": "README.md", "phase": "placement"}}
{"prompt": "Explain How to Run", "response": "Before running, make sure the benchmarks have been downloaded and the python dependency packages have been installed.\nGo to the **install directory** and run with JSON configuration file for full placement.\n\n```\ncd <installation directory>\npython dreamplace/Placer.py test/ispd2005/adaptec1.json\n```\n\nTest individual `pytorch` op with the unit tests in the root directory.\n\n```\ncd <installation directory>\npython unittest/ops/hpwl_unittest.py\n```", "metadata": {"source": "documentation", "file": "README.md", "phase": "placement"}}
{"prompt": "Explain Authors", "response": "- [Yibo Lin](http://yibolin.com), supervised by [David Z. Pan](http://users.ece.utexas.edu/~dpan), composed the initial release.\n- [Zixuan Jiang](https://github.com/ZixuanJiang) and [Jiaqi Gu](https://github.com/JeremieMelo) improved the efficiency of the wirelength and density operators on GPU.\n- [Yibo Lin](http://yibolin.com) and [Jiaqi Gu](https://github.com/JeremieMelo) developed and integrated ABCDPlace for detailed placement.\n- [Peiyu Liao](https://enzoleo.github.io) and [Siting Liu](https://lusica1031.github.io) developed and integrated timing optimization in global placement for DREAMPlace 4.0.\n- Yifan Chen developed the 2-stage flow and improved the optimizer for macro placement in DREAMPlace 4.1. Set ```use_bb``` to 1 to turn on BB-step and ```macro_place_flag``` to 1 to enable 2-stage flow for macro placement. \n- Yiting Liu contributed the GiFt operator for placement initialization, published at ICCAD 2024. Set ```gift_init_flag``` to 1 to turn on this feature, and use ```gift_init_scale``` to control the scale parameter of this operator. \n```\nYiting Liu, Hai Zhou, Jia Wang, Fan Yang, Xuan Zeng, Li Shang, \n\"The Power of Graph Signal Processing for Chip Placement Acceleration\", \n  IEEE/ACM International Conference on Computer-Aided Design (ICCAD), New Jersey, USA, Oct, 2024\n(Thanks for contributing the source code!)\n```\n\n- **Pull requests to improve the tool are more than welcome.** We appreciate all kinds of contributions from the community.", "metadata": {"source": "documentation", "file": "README.md", "phase": "placement"}}
{"prompt": "Explain Reference Results for Macro Placement", "response": "Recently, many studies chose DREAMPLace for macro placement, e.g., [[Cheng+, NeurIPS2021](https://arxiv.org/abs/2111.00234)], [[Lai+, NeurIPS2023](https://arxiv.org/pdf/2211.13382)], etc. However, the results reported on the same benchmarks vary significantly from one work to another. For better comparison, we provide the results collected from our GPU machine for reference. If your results deviate significantly (i.e., >5% longer HPWL) from the following numbers, something may be wrong. We recommend you to contact us with logs for validation.\n\nNote that DREAMPlace 4.1.0 only implements the BB step and 2-stage flow proposed in [[Chen+, ICCAD2023](https://ieeexplore.ieee.org/document/10323700)]. \n\n[ISPD2005 benchmark](https://dl.acm.org/doi/10.1145/1629911.1630028) with all fixed macros and IO pads regarded as movable macros. It can be downloaded from [here](https://www.dropbox.com/scl/fi/01jvzui9hv0aa4krnd8lm/ispd2005free.zip?rlkey=ijwspusl9onncnsu5j4na4tqe&st=l44f3dnw&dl=0).\n<table>\n<thead>\n  <tr>\n    <th></th>\n    <th colspan=\"3\">DREAMPlace 4.0</th>\n    <th colspan=\"3\">DREAMPlace 4.1.0</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td></td>\n    <td>Iterations</td>\n    <td>HPWL(x10^6)</td>\n    <td>Time(s)</td>\n    <td>Iterations</td>\n    <td>HPWL(x10^6)</td>\n    <td>Time(s)</td>\n  </tr>\n  <tr>\n    <td>adaptec1</td>\n    <td>600</td>\n    <td>101.3</td>\n    <td>26.3</td>\n    <td>748</td>\n    <td>68.2 </td>\n    <td>27.6</td>\n  </tr>\n  <tr>\n    <td>adaptec2</td>\n    <td>588*</td>\n    <td>137.5*</td>\n    <td>40.6*</td>\n    <td>784</td>\n    <td>86.3 </td>\n    <td>40.1</td>\n  </tr>\n  <tr>\n    <td>adaptec3</td>\n    <td>765</td>\n    <td>179.5</td>\n    <td>54.1</td>\n    <td>894</td>\n    <td>144.0 </td>\n    <td>56.1</td>\n  </tr>\n  <tr>\n    <td>adaptec4</td>\n    <td>876</td>\n    <td>153.3</td>\n    <td>48.9</td>\n    <td>872</td>\n    <td>140.8 </td>\n    <td>57.3</td>\n  </tr>\n  <tr>\n    <td>bigblue1</td>\n    <td>699</td>\n    <td>86.2</td>\n    <td>23.5</td>\n    <td>813</td>\n    <td>82.0 </td>\n    <td>25.5</td>\n  </tr>\n  <tr>\n    <td>bigblue2</td>\n    <td>1267*</td>\n    <td>2426.7*</td>\n    <td>679.4*</td>\n    <td>869</td>\n    <td>98.1 </td>\n    <td>193.4</td>\n  </tr>\n  <tr>\n    <td>bigblue3</td>\n    <td>1207</td>\n    <td>330.2</td>\n    <td>115.4</td>\n    <td>1307</td>\n    <td>288.8 </td>\n    <td>140.1</td>\n  </tr>\n  <tr>\n    <td>bigblue4</td>\n    <td>1581</td>\n    <td>820.1</td>\n    <td>239.6</td>\n    <td>1875</td>\n    <td>610.0 </td>\n    <td>234.5</td>\n  </tr>\n  <tr>\n    <td>average ratio</td>\n    <td>0.937</td>\n    <td>4.211</td>\n    <td>1.258</td>\n    <td>1.000</td>\n    <td>1.000</td>\n    <td>1.000</td>\n  </tr>\n</tbody>\n</table>\n\n[MMS benchmark](https://dl.acm.org/doi/10.1145/1629911.1630028) (modified from ISPD2005 benchmarks with movable macros and fixed IO pads)\n\nOur modified version can be downloaded from [here](https://www.dropbox.com/scl/fi/23i1jlmc9xhvfnj0jv82k/mms_mod.zip?rlkey=x4c0a4r877ii5ychu5lk4ur48&dl=0).\n\n<table>\n<thead>\n  <tr>\n    <th></th>\n    <th colspan=\"3\">DREAMPlace 4.0</th>\n    <th colspan=\"3\">DREAMPlace 4.1.0</th>\n  </tr>\n</thead>\n<tbody>\n  <tr>\n    <td></td>\n    <td>Iterations</td>\n    <td>HPWL(x10^6)</td>\n    <td>Time(s)</td>\n    <td>Iterations</td>\n    <td>HPWL(x10^6)</td>\n    <td>Time(s)</td>\n  </tr>\n  <tr>\n    <td>adaptec1</td>\n    <td>607</td>\n    <td>65.3 </td>\n    <td>17.8 </td>\n    <td>746</td>\n    <td>64.7 </td>\n    <td>25.8</td>\n  </tr>\n  <tr>\n    <td>adaptec2</td>\n    <td>569</td>\n    <td>79.3 </td>\n    <td>28.5 </td>\n    <td>734</td>\n    <td>75.8 </td>\n    <td>35.8</td>\n  </tr>\n  <tr>\n    <td>adaptec3</td>\n    <td>659</td>\n    <td>158.1 </td>\n    <td>44.6 </td>\n    <td>755</td>\n    <td>153.3 </td>\n    <td>38.9</td>\n  </tr>\n  <tr>\n    <td>adaptec4</td>\n    <td>735</td>\n    <td>141.7 </td>\n    <td>46.8 </td>\n    <td>782</td>\n    <td>142.4 </td>\n    <td>47.5</td>\n  </tr>\n  <tr>\n    <td>adaptec5</td>\n    <td>1053</td>\n    <td>326.3</td>\n    <td>63.8</td>\n    <td>1405</td>\n    <td>337.6 </td>\n    <td>78.4</td>\n  </tr>\n  <tr>\n    <td>bigblue1</td>\n    <td>646</td>\n    <td>85.4 </td>\n    <td>21.3 </td>\n    <td>809</td>\n    <td>85.3 </td>\n    <td>28.9</td>\n  </tr>\n  <tr>\n    <td>bigblue2</td>\n    <td>638</td>\n    <td>125.3 </td>\n    <td>42.0 </td>\n    <td>773</td>\n    <td>125.4 </td>\n    <td>48.4</td>\n  </tr>\n  <tr>\n    <td>bigblue3</td>\n    <td>911</td>\n    <td>279.3 </td>\n    <td>112.5 </td>\n    <td>1097</td>\n    <td>273.8 </td>\n    <td>136.1</td>\n  </tr>\n  <tr>\n    <td>bigblue4</td>\n    <td>1189</td>\n    <td>648.8 </td>\n    <td>172.4 </td>\n    <td>1515</td>\n    <td>643.2 </td>\n    <td>215.4</td>\n  </tr>\n  <tr>\n    <td>newblue1</td>\n    <td>574</td>\n    <td>62.8 </td>\n    <td>22.5 </td>\n    <td>749</td>\n    <td>62.0 </td>\n    <td>30.4</td>\n  </tr>\n  <tr>\n    <td>newblue2</td>\n    <td>730</td>\n    <td>155.5 </td>\n    <td>34.8 </td>\n    <td>861</td>\n    <td>156.1 </td>\n    <td>43.9</td>\n  </tr>\n  <tr>\n    <td>newblue3</td>\n    <td>1318*</td>\n    <td>597.3*</td>\n    <td>55.71*</td>\n    <td>830</td>\n    <td>270.6 </td>\n    <td>72.8</td>\n  </tr>\n  <tr>\n    <td>newblue4</td>\n    <td>1009</td>\n    <td>246.2</td>\n    <td>52.6</td>\n    <td>1274</td>\n    <td>245.8 </td>\n    <td>53.9</td>\n  </tr>\n  <tr>\n    <td>newblue5</td>\n    <td>1254</td>\n    <td>444.2 </td>\n    <td>99.4 </td>\n    <td>1537</td>\n    <td>446.4 </td>\n    <td>134.9</td>\n  </tr>\n  <tr>\n    <td>newblue6</td>\n    <td>929</td>\n    <td>410.6 </td>\n    <td>96.1 </td>\n    <td>1157</td>\n    <td>409.3 </td>\n    <td>115.1</td>\n  </tr>\n  <tr>\n    <td>newblue7</td>\n    <td>1077</td>\n    <td>903.6 </td>\n    <td>184.1 </td>\n    <td>1578</td>\n    <td>903.2 </td>\n    <td>235.1</td>\n  </tr>\n  <tr>\n    <td>average ratio</td>\n    <td>0.855</td>\n    <td>1.081</td>\n    <td>0.830</td>\n    <td>1.000</td>\n    <td>1.000</td>\n    <td>1.000</td>\n  </tr>\n</tbody>\n</table>\n`*` denotes divergence or legalization failure. \nNote that if you observe divergence or legalization errors in the log, then the results may not be representative.", "metadata": {"source": "documentation", "file": "README.md", "phase": "placement"}}
{"prompt": "How do I run placement with DREAMPlace?", "response": "To run placement with DREAMPlace:\n\n1. **Prepare Input Files**:\n   - Netlist (Verilog or BOOKSHELF format)\n   - DEF file with floorplan\n   - LEF file with cell/technology info\n\n2. **Create Configuration JSON**:\n```json\n{\n  \"aux_input\": \"design.aux\",\n  \"gpu\": 1,\n  \"num_threads\": 8,\n  \"target_density\": 0.7,\n  \"global_place_flag\": 1,\n  \"detailed_place_flag\": 1\n}\n```\n\n3. **Run Placement**:\n```python\nimport dreamplace\n\nplacer = dreamplace.Placer(config_file=\"config.json\")\nresult = placer.place()\n```\n\n4. **Check Results**:\n   - HPWL (half-perimeter wirelength)\n   - Overflow\n   - Density distribution\n\nOutput will show:\n- Final HPWL\n- Runtime\n- GPU utilization", "metadata": {"phase": "placement", "source": "synthetic", "tool": "dreamplace"}}
{"prompt": "What parameters affect placement quality in DREAMPlace?", "response": "Key DREAMPlace placement parameters:\n\n1. **target_density** (0.0-1.0):\n   - How densely to pack cells\n   - Lower = more whitespace, better routability\n   - Higher = less area, potential congestion\n   - Typical: 0.6-0.8\n\n2. **gamma** (wirelength smoothing):\n   - Smoothing parameter for HPWL\n   - Higher = smoother optimization\n   - Range: 0.5-5.0\n\n3. **num_bins_x/y**:\n   - Grid resolution for density\n   - More bins = finer control\n   - Typical: 512x512 or 1024x1024\n\n4. **global_place_stages**:\n   - Number of global placement iterations\n   - More stages = better convergence\n   - Typical: 3-5\n\n5. **learning_rate**:\n   - Optimization step size\n   - Too high = instability\n   - Too low = slow convergence\n   - Adaptive recommended\n\nExample configuration:\n```json\n{\n  \"target_density\": 0.7,\n  \"gamma\": 2.0,\n  \"num_bins_x\": 512,\n  \"num_bins_y\": 512,\n  \"global_place_stages\": 4\n}\n```", "metadata": {"phase": "placement", "source": "synthetic", "tool": "dreamplace"}}
{"prompt": "How do I reduce wirelength in placement?", "response": "Strategies to reduce wirelength in placement:\n\n1. **Adjust Target Density**:\n   - Lower density gives more room for optimization\n   - Try: target_density = 0.6-0.7\n\n2. **Enable Timing-Driven Mode**:\n   ```json\n   {\n     \"timing_driven\": true,\n     \"timing_weight\": 0.3\n   }\n   ```\n\n3. **Use Multi-Stage Placement**:\n   - Global placement first\n   - Then detailed placement\n   - Refine iteratively\n\n4. **Optimize Net Weighting**:\n   - Weight critical nets higher\n   - Reduces delay on critical paths\n\n5. **Adjust Wirelength Model**:\n   - Use weighted HPWL\n   - Consider routing congestion\n\n6. **Clustering**:\n   - Group related cells\n   - Place clusters together\n\nDREAMPlace automatically optimizes wirelength through:\n- Gradient-based optimization\n- GPU acceleration\n- Density-aware smoothing\n\nMonitor HPWL during placement:\n```\nIteration 0: HPWL = 1,234,567\nIteration 10: HPWL = 987,654\nIteration 20: HPWL = 856,432\n...\n```\n\nLower HPWL = better placement quality.", "metadata": {"phase": "placement", "source": "synthetic", "tool": "dreamplace"}}
